/*************************************/
-- SAP HANA Graph examples - How to use OPENCYPHER_TABLE
-- 2021-04-15
-- This script was developed for SAP HANA Cloud 2021 Q1
-- See also https://help.sap.com/viewer/11afa2e60a5f4192a381df30f94863f9/cloud/en-US/3b0a971b129c446c9e40a797bdb29c2b.html
/*************************************/
DROP SCHEMA "GRAPHSCRIPT" CASCADE;
CREATE SCHEMA "GRAPHSCRIPT";

CREATE COLUMN TABLE "GRAPHSCRIPT"."VERTICES" (
	"ID" BIGINT PRIMARY KEY,
	"NAME" VARCHAR(100)
);
CREATE COLUMN TABLE "GRAPHSCRIPT"."EDGES" (
	"ID" BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	"SOURCE" BIGINT REFERENCES "GRAPHSCRIPT"."VERTICES"("ID") ON DELETE CASCADE NOT NULL,
	"TARGET" BIGINT REFERENCES "GRAPHSCRIPT"."VERTICES"("ID") ON DELETE CASCADE NOT NULL
);

INSERT INTO "GRAPHSCRIPT"."VERTICES"("ID", "NAME") VALUES (1, 'one');
INSERT INTO "GRAPHSCRIPT"."VERTICES"("ID", "NAME") VALUES (2, 'two');
INSERT INTO "GRAPHSCRIPT"."VERTICES"("ID", "NAME") VALUES (3, 'three');
INSERT INTO "GRAPHSCRIPT"."VERTICES"("ID", "NAME") VALUES (4, 'four');
INSERT INTO "GRAPHSCRIPT"."VERTICES"("ID", "NAME") VALUES (5, 'five');
INSERT INTO "GRAPHSCRIPT"."EDGES"("SOURCE", "TARGET") VALUES (1, 2);
INSERT INTO "GRAPHSCRIPT"."EDGES"("SOURCE", "TARGET") VALUES (1, 3);
INSERT INTO "GRAPHSCRIPT"."EDGES"("SOURCE", "TARGET") VALUES (2, 3);
INSERT INTO "GRAPHSCRIPT"."EDGES"("SOURCE", "TARGET") VALUES (2, 4);
INSERT INTO "GRAPHSCRIPT"."EDGES"("SOURCE", "TARGET") VALUES (3, 4);
INSERT INTO "GRAPHSCRIPT"."EDGES"("SOURCE", "TARGET") VALUES (5, 4);

CREATE GRAPH WORKSPACE "GRAPHSCRIPT"."GRAPHWS"
	EDGE TABLE "GRAPHSCRIPT"."EDGES"
		SOURCE COLUMN "SOURCE"
		TARGET COLUMN "TARGET"
		KEY COLUMN "ID"
	VERTEX TABLE "GRAPHSCRIPT"."VERTICES" 
		KEY COLUMN "ID";

-- basic query
SELECT * FROM OPENCYPHER_TABLE(
		GRAPH WORKSPACE "GRAPHSCRIPT"."GRAPHWS"
		QUERY 'MATCH (n1)-[e1]-(n2)
			WHERE n1.ID = 4
			RETURN n1.ID AS N1_ID, n2.ID AS N2_ID'
);

-- basic aggregation using COUNT
SELECT * FROM OPENCYPHER_TABLE(
		GRAPH WORKSPACE "GRAPHSCRIPT"."GRAPHWS"
		QUERY 'MATCH (n1)-[e1]-(nei), (nei)-[e2]-(n2)	
			WHERE n1.ID = 4
			RETURN n1.ID AS N1_ID, n2.ID AS N2_ID, COUNT(nei.ID) AS NUMBER_OF_COMMON_NEIGHBORS'
);

-- list comprehension, aka paths and string concat
SELECT * FROM OPENCYPHER_TABLE( 
	GRAPH WORKSPACE "GRAPHSCRIPT"."GRAPHWS" 
	QUERY 'MATCH p=(n1)-[*2..3]->(n2) WHERE n1.ID = 1
		RETURN n1.ID AS SOURCE, [e IN RELATIONSHIPS(p) | e.ID] AS PATH, n2.ID AS TARGET'
);

-- returning result in JSON format
SELECT * FROM OPENCYPHER_TABLE( 
	GRAPH WORKSPACE "GRAPHSCRIPT"."GRAPHWS" 
	QUERY 'MATCH (n1)-[e1]-(n2)
		WHERE n1.ID = 4
		RETURN {Vertex1:n1.ID, EdgeID:e1.ID, Vertex2:n2.ID} AS JSON_RESULT'
);

-- using parameters
SELECT * FROM OPENCYPHER_TABLE(
	GRAPH WORKSPACE "GRAPHSCRIPT"."GRAPHWS" 
	QUERY 'MATCH (n1)-[e1]-(n2)
		WHERE n1.ID =  $p_id
		RETURN {Vertex1:n1.ID, EdgeID:e1.ID, Vertex2:n2.ID} AS JSON_RESULT'
	PARAMETERS ('p_id'= ?)
);
